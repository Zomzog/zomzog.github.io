<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zomzog&#39;s blog</title>
    <link>https://zomzog.fr/</link>
    <description>Recent content on Zomzog&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <copyright>All code and content for this blog is available as [open source on GitHub](https://github.com/zomzog/zomzog.fr).</copyright>
    <lastBuildDate>Mon, 15 Feb 2021 18:10:00 +0100</lastBuildDate><atom:link href="https://zomzog.fr/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Contract-first Rest API journey - Draft</title>
      <link>https://zomzog.fr/2021/02/contract-first-rest-api-journey-draft/</link>
      <pubDate>Mon, 15 Feb 2021 18:10:00 +0100</pubDate>
      
      <guid>https://zomzog.fr/2021/02/contract-first-rest-api-journey-draft/</guid>
      <description>&lt;div class=&#34;paragraph text-center&#34;&gt;
&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://zomzog.fr/images/contract-first-journey/header.png&#34; alt=&#34;icon&#34; width=&#34;300&#34;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Lucky me! I have my API contract created with my magic designer tool!
And now? Is it useful for something else that being yaml/json file?&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>OpenApi generator inheritance</title>
      <link>https://zomzog.fr/2020/05/openapi-generator-inheritance/</link>
      <pubDate>Sun, 31 May 2020 19:24:11 +0100</pubDate>
      
      <guid>https://zomzog.fr/2020/05/openapi-generator-inheritance/</guid>
      <description>&lt;div class=&#34;paragraph text-center&#34;&gt;
&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://zomzog.fr/images/openapi-inheritance/openapi-generator-logo.svg&#34; alt=&#34;icon&#34; width=&#34;200&#34;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We have to create a new API with inheritance in the model.
To continue with the contract first way,
we will see how to write it in OAS3.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Ergodox accent without international deadkey</title>
      <link>https://zomzog.fr/2020/03/ergodox-accent-without-international-deadkey/</link>
      <pubDate>Wed, 18 Mar 2020 18:10:00 +0100</pubDate>
      
      <guid>https://zomzog.fr/2020/03/ergodox-accent-without-international-deadkey/</guid>
      <description>&lt;div class=&#34;paragraph text-center&#34;&gt;
&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://zomzog.fr/images/ergodox-accent/ergodox.png&#34; alt=&#34;icon&#34; width=&#34;500&#34;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I try to configure an ergodox-ez keyboard with developper layout but also to be able to type french text.
So I don’t want to set US-International layout because I don’t want dead key on all &lt;code&gt;&amp;#39;&lt;/code&gt; and &lt;code&gt;`&lt;/code&gt; when I develop.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>OpenApi generator client auth token management</title>
      <link>https://zomzog.fr/2020/03/openapi-generator-client-auth-token-management/</link>
      <pubDate>Sat, 14 Mar 2020 21:24:11 +0100</pubDate>
      
      <guid>https://zomzog.fr/2020/03/openapi-generator-client-auth-token-management/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In my team, we try to use a contract-first approach for our REST APIs.
With multiple microservices, we need to pass user token when we call another service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this article, I will show how to easily pass this token with a generated RestTemplate client and Springboot.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Gitflow &#43; Maven = JgitVer</title>
      <link>https://zomzog.fr/2019/12/gitflow-maven-jgitver/</link>
      <pubDate>Thu, 12 Dec 2019 21:24:11 +0100</pubDate>
      
      <guid>https://zomzog.fr/2019/12/gitflow-maven-jgitver/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Gitflow is a branching model for Git where the develop branch contains staging modification and master branch contains released commits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this article, I will present you how we simplified maven version management to avoid merge conflict and ease our release process.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Contract-First</title>
      <link>https://zomzog.fr/2019/12/contract-first/</link>
      <pubDate>Wed, 11 Dec 2019 21:24:11 +0100</pubDate>
      
      <guid>https://zomzog.fr/2019/12/contract-first/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An updated version of api-first presentation my teamates to OpenAPI-Generator.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Unit toolkit</title>
      <link>https://zomzog.fr/2019/10/unit-toolkit/</link>
      <pubDate>Wed, 09 Oct 2019 23:05:11 +0100</pubDate>
      
      <guid>https://zomzog.fr/2019/10/unit-toolkit/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This presentation has been created to introduce my teamates to Junit 5 and other frameworks.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>API-First</title>
      <link>https://zomzog.fr/2019/03/api-first/</link>
      <pubDate>Tue, 05 Mar 2019 21:24:11 +0100</pubDate>
      
      <guid>https://zomzog.fr/2019/03/api-first/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This presentation has been created to introduce my teamates to OpenAPI-Generator.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Aspect Oriented Programming</title>
      <link>https://zomzog.fr/2018/09/aspect-oriented-programming/</link>
      <pubDate>Sun, 23 Sep 2018 19:18:21 +0100</pubDate>
      
      <guid>https://zomzog.fr/2018/09/aspect-oriented-programming/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This presentation has been created to introduce my teamates to aop.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Prestashop 1.7 module</title>
      <link>https://zomzog.fr/2017/12/prestashop-1.7-module/</link>
      <pubDate>Tue, 05 Dec 2017 08:35:41 +0100</pubDate>
      
      <guid>https://zomzog.fr/2017/12/prestashop-1.7-module/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I’ve installed a Prestashop store because…​ It’s free and open source.
I need some modules like EU cookie banner and I don’t want to pay 30+€ just for that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I looked at the community solution but I didn’t find a solution that transcended me…​
And in fact, it’s a good &amp;#34;hello world&amp;#34; example for me to learn how to create modules for Prestashop.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Springboot embeded flowable</title>
      <link>https://zomzog.fr/2017/11/springboot-embeded-flowable/</link>
      <pubDate>Wed, 01 Nov 2017 21:49:21 +0100</pubDate>
      
      <guid>https://zomzog.fr/2017/11/springboot-embeded-flowable/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this tutorial, we’ll see how to initiate a springboot project with flowable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We will build an API to make a pony says &amp;#34;hello &amp;lt;name&amp;gt;&amp;#34; or &amp;#34;Eeyup&amp;#34; if the pony is Big McIntosh&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zomzog.fr/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zomzog.fr/1/01/</guid>
      <description>The backend developer Has a backend developer, I have a SpringBoot application and I want to scaffold the API from the contract, but I also want to be able to update this contract and redo the scaffolding without losing everything.
 I will use the openapi-generator-maven-plugin for this. As inputSpec I will provide a link to my contract. For the generatorName I want the spring generator. I can also tweak API and model package, but I don’t need supporting files (pom.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zomzog.fr/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zomzog.fr/1/01/</guid>
      <description>The documentation team The contract can be directly imported in swagger-ui With docker: docker run -p 80:8080 -e URLS=&amp;#34;[{url: \&amp;#34;https://gist.githubusercontent.com/Zomzog/6b2f0b59a93e176cd6e71cde393a91e3/raw/598decdf460683baea0db14ad46ed026192c0fff/contract.yaml\&amp;#34;, name: \&amp;#34;Ponies\&amp;#34;}]&amp;#34; swaggerapi/swagger-ui
  Generate documentation with openapi-generator Asciidoc exemple: npx @openapitools/openapi-generator-cli generate -i openapi.yaml -g asciidoc -o ./asciidoc
 A custom template can be easly created that will allow to generate constant documentation format for all APIs.
    </description>
    </item>
    
  </channel>
</rss>
